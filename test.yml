swagger: "2.0"
info:
  version: "0.0.1"
  title: Redis Music - Express Example
# during dev, should point to your local machine
host: localhost:10010
# basePath prefixes all resource paths
basePath: /
#
schemes:
  # tip: remove http to make production-grade
  - http
  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json
paths:
  /hello:
    # binds a127 app logic to a route
    x-swagger-router-controller: hello_world
    get:
      description: Returns 'Hello' to the caller
      # used as the method name of the controller
      operationId: hello
      parameters:
        - name: name
          in: query
          description: The name of the person to whom to say hello
          required: false
          type: string
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/HelloWorld"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/Error"
  /add_song:
    x-swagger-router-controller: music

    post:
      description: Adds a song to the database
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Song'
      operationId: add
      parameters:
        - in: body
          name: song
          description: The song to create.
          schema:
            type: object
            required:
              - title
              - artist
              - album
            properties:
              title:
                type: string
              artist:
                type: string
              album:
                type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/Song"
        default:
          description: Error
          schema:
            $ref: "#/definitions/Error"

  /get_song_by_title:
    x-swagger-router-controller: music
    get:
      description: Gets a song by title
      operationId: getByTitle
      parameters:
        - name: title
          in: query
          description: The title of the song
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/Song"
        default:
          description: Error
          schema:
            $ref: "#/definitions/Error"

  /get_album_by_title:
    x-swagger-router-controller: music
    get:
      description: Gets a collection of songs by album
      operationId: getByAlbum
      parameters:
        - name: album
          in: query
          description: The album who's songs we want to fetch
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/Album"
        default:
          description: Error
          schema:
            $ref: "#/definitions/Error"

  /get_all_albums:
    x-swagger-router-controller: music
    get:
      description: Lists all albums in the database by title
      operationId: getAllAlbums
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/Albums"
        default:
          description: Error
          schema:
            $ref: "#/definitions/Error"

  /get_all_artists:
    x-swagger-router-controller: music
    get:
      description: Lists all artists in the database by name
      operationId: getAllArtists
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/Artists"
        default:
          description: Error
          schema:
            $ref: "#/definitions/Error"

  /get_artist_by_name:
    x-swagger-router-controller: music
    get:
      description: Get's an artists discography
      operationId: getArtistByName
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/Artist"
        default:
          description: Error
          schema:
            $ref: "#/definitions/Error"

  /get_all_songs:
    x-swagger-router-controller: music
    get:
      description: Lists all songs in the database
      operationId: getAllSongs
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/Library"
        default:
          description: Error
          schema:
            $ref: "#/definitions/Error"

  /swagger:
    x-swagger-pipe: swagger_raw

# complex objects have schema definitions
definitions:
  Albums:
    properties:
      albums:
        type: array
        items:
          type: string
  Artists:
    properties:
      artists:
        type: array
        items:
          type: string
  Album:
    properties:
      title:
        type: string
      artist:
        type: string
      songs:
        type: array
        items:
          type: string
  Artist:
    properties:
      artist:
        type: string
      albums:
        type: array
        items:
          type: string
      songs:
        type: array
        items:
          type: string
  Library:
    properties:
      songs:
        type: array
        items:
          type: string
  Song:
    properties:
      title:
        type: string
      artist:
        type: string
      album:
        type: string
  HelloWorld:
    required:
      - message
    properties:
      message:
        type: string
  Error:
    required:
      - message
    properties:
      message:
        type: string
